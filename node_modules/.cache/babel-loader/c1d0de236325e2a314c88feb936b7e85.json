{"ast":null,"code":"var _jsxFileName = \"/Users/avathorn/repos/TextFSMWeb/text-fsm-web/src/components/ReactFlow/ReactFlow.jsx\",\n    _s = $RefreshSig$();\n\n// import ReactF from 'react-flow-renderer';\nimport classNames from \"classnames/dedupe\";\nimport { Card, CardBody } from \"reactstrap\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactF, { isEdge, ReactFlowProvider, addEdge, removeElements, Controls, Background } from 'react-flow-renderer';\nimport { Sidebar } from './Sidebar';\nimport ColorSelectorNode from './StartNode';\nimport 'assets/css/react-flow.css';\nimport 'assets/css/dnd.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  selectorNode: ColorSelectorNode\n};\nlet id = 0;\n\nconst getId = () => `dndnode_${id++}`;\n\nexport const ReactFlow = ({ ...props\n}) => {\n  _s();\n\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState([]);\n  const [bgColor, setBgColor] = useState(null);\n\n  const onConnect = params => setElements(els => addEdge(params, els));\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onLoad = _reactFlowInstance => setReactFlowInstance(_reactFlowInstance);\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = event => {\n    event.preventDefault();\n    console.log(\"HELEJSLFJKL\");\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left - (event.clientX - reactFlowBounds.left),\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: getId(),\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setElements(es => es.concat(newNode));\n  }; //  useEffect(() => {\n  // \t// const onChange = (event) => {\n  // \t//   setElements((els) =>\n  // \t//     els.map((e) => {\n  // \t//       if (isEdge(e) || e.id !== '2') {\n  // \t//         return e;\n  // \t//       }\n  // \t//       const color = event.target.value;\n  // \t//       setBgColor(color);\n  // \t//       return {\n  // \t//         ...e,\n  // \t//         data: {\n  // \t//           ...e.data,\n  // \t//           color,\n  // \t//         },\n  // \t//       };\n  // \t//     })\n  // \t//   );\n  // \t// };\n  // \tsetElements([\n  // \t  {\n  // \t    id: '1',\n  // \t    type: 'input',\n  // \t    data: { label: 'input node' },\n  // \t    position: { x: 250, y: 25 },\n  // \t  },\n  // \t  // {\n  // \t  //   id: '2',\n  // \t  //   type: 'selectorNode',\n  // \t  //   data: { onChange: () => {}, color: '#1A192B' },\n  // \t  //   style: { border: '1px solid #777', padding: 10 },\n  // \t  //   position: { x: 300, y: 50 },\n  // \t  // },\n  // \t]);\n  // })\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classNames(props.className, \"h-100\"),\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dndflow\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reactflow-wrapper\",\n            ref: reactFlowWrapper,\n            children: /*#__PURE__*/_jsxDEV(ReactF, {\n              elements: elements,\n              onConnect: onConnect,\n              onElementsRemove: onElementsRemove,\n              onLoad: onLoad,\n              onDrop: onDrop,\n              onDragOver: onDragOver // nodeTypes={nodeTypes}\n              ,\n              snapToGrid: true,\n              snapGrid: [20, 20],\n              children: [/*#__PURE__*/_jsxDEV(Background, {\n                variant: \"lines\",\n                gap: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 16\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 14\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ReactFlow, \"UUvF/T1kvfB5GpebCAyoBtHCRXk=\");\n\n_c = ReactFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactFlow\");","map":{"version":3,"sources":["/Users/avathorn/repos/TextFSMWeb/text-fsm-web/src/components/ReactFlow/ReactFlow.jsx"],"names":["classNames","Card","CardBody","React","useState","useRef","useEffect","ReactF","isEdge","ReactFlowProvider","addEdge","removeElements","Controls","Background","Sidebar","ColorSelectorNode","nodeTypes","selectorNode","id","getId","ReactFlow","props","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","elements","setElements","bgColor","setBgColor","onConnect","params","els","onElementsRemove","elementsToRemove","onLoad","_reactFlowInstance","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","console","log","reactFlowBounds","current","getBoundingClientRect","type","getData","position","project","x","clientX","left","y","clientY","top","newNode","data","label","es","concat","className"],"mappings":"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","sourcesContent":["// import ReactF from 'react-flow-renderer';\nimport classNames from \"classnames/dedupe\";\nimport { Card, CardBody } from \"reactstrap\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactF, {\n\tisEdge,\n  ReactFlowProvider,\n  addEdge,\n  removeElements,\n  Controls,\n  Background\n} from 'react-flow-renderer';\n\nimport { Sidebar } from './Sidebar';\nimport ColorSelectorNode from './StartNode';\n\nimport 'assets/css/react-flow.css';\nimport 'assets/css/dnd.css';\n\nconst nodeTypes = {\n  selectorNode: ColorSelectorNode\n};\n\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n\nexport const ReactFlow = ({ ...props }) => {\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState([]);\n  const [bgColor, setBgColor] = useState(null);\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\n  const onElementsRemove = (elementsToRemove) =>\n    setElements((els) => removeElements(elementsToRemove, els));\n\n  const onLoad = (_reactFlowInstance) =>\n    setReactFlowInstance(_reactFlowInstance);\n\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = (event) => {\n    event.preventDefault();\n    console.log(\"HELEJSLFJKL\")\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left - (event.clientX - reactFlowBounds.left),\n      y: event.clientY - reactFlowBounds.top,\n    });\n    const newNode = {\n      id: getId(),\n      type,\n      position,\n      data: { label: `${type} node` },\n    };\n\n    setElements((es) => es.concat(newNode));\n  };\n //  useEffect(() => {\n\t// \t// const onChange = (event) => {\n\t// \t//   setElements((els) =>\n\t// \t//     els.map((e) => {\n\t// \t//       if (isEdge(e) || e.id !== '2') {\n\t// \t//         return e;\n\t// \t//       }\n\n\t// \t//       const color = event.target.value;\n\n\t// \t//       setBgColor(color);\n\n\t// \t//       return {\n\t// \t//         ...e,\n\t// \t//         data: {\n\t// \t//           ...e.data,\n\t// \t//           color,\n\t// \t//         },\n\t// \t//       };\n\t// \t//     })\n\t// \t//   );\n\t// \t// };\n\n\t// \tsetElements([\n\t// \t  {\n\t// \t    id: '1',\n\t// \t    type: 'input',\n\t// \t    data: { label: 'input node' },\n\t// \t    position: { x: 250, y: 25 },\n\t// \t  },\n\t// \t  // {\n\t// \t  //   id: '2',\n\t// \t  //   type: 'selectorNode',\n\t// \t  //   data: { onChange: () => {}, color: '#1A192B' },\n\t// \t  //   style: { border: '1px solid #777', padding: 10 },\n\t// \t  //   position: { x: 300, y: 50 },\n\t// \t  // },\n\t// \t]);\n\t// })\n\n\treturn (\n\t\t<Card className={ classNames(props.className, \"h-100\") }>\n\t\t\t<CardBody>\n\n\t\t\t    <div className=\"dndflow\">\n\t\t\t      <ReactFlowProvider>\n\t\t\t        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n\t\t\t          <ReactF\n\t\t\t            elements={elements}\n\t\t\t            onConnect={onConnect}\n\t\t\t            onElementsRemove={onElementsRemove}\n\t\t\t            onLoad={onLoad}\n\t\t\t            onDrop={onDrop}\n\t\t\t            onDragOver={onDragOver}\n\t\t\t            // nodeTypes={nodeTypes}\n\t\t\t            snapToGrid={true}\n\t\t\t            snapGrid={[20, 20]}\n\t\t\t          >\n\t\t\t          \t<Background variant=\"lines\" gap={20}/>\n\t\t\t            <Controls />\n\t\t\t          </ReactF>\n\t\t\t        </div>\n\t\t\t        <Sidebar />\n\t\t\t      </ReactFlowProvider>\n\t\t\t    </div>\n\t\t\t</CardBody>\n\t\t</Card>\n\t)\n}"]},"metadata":{},"sourceType":"module"}