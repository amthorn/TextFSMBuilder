{"ast":null,"code":"var _jsxFileName = \"/Users/avathorn/repos/TextFSMWeb/text-fsm-web/src/components/ReactFlow/ReactFlow.jsx\",\n    _s = $RefreshSig$();\n\n// import ReactF from 'react-flow-renderer';\nimport classNames from \"classnames/dedupe\";\nimport { Card, CardBody } from \"reactstrap\";\nimport React, { useState, useRef } from 'react';\nimport ReactF, { ReactFlowProvider, addEdge, removeElements, Controls } from 'react-flow-renderer';\nimport { Sidebar } from './Sidebar';\nimport ColorSelectorNode from './StartNode';\nimport 'assets/css/react-flow.css';\nimport 'assets/css/dnd.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  selectorNode: ColorSelectorNode\n};\n\nconst onChange = event => {\n  setElements(els => els.map(e => {\n    if (isEdge(e) || e.id !== '2') {\n      return e;\n    }\n\n    const color = event.target.value;\n    setBgColor(color);\n    return { ...e,\n      data: { ...e.data,\n        color\n      }\n    };\n  }));\n};\n\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'input node'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}, {\n  id: '2',\n  type: 'selectorNode',\n  data: {\n    onChange: onChange,\n    color: '#1A192B'\n  },\n  style: {\n    border: '1px solid #777',\n    padding: 10\n  },\n  position: {\n    x: 300,\n    y: 50\n  }\n}];\nlet id = 0;\n\nconst getId = () => `dndnode_${id++}`;\n\nexport const ReactFlow = ({ ...props\n}) => {\n  _s();\n\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState(initialElements);\n\n  const onConnect = params => setElements(els => addEdge(params, els));\n\n  const onElementsRemove = elementsToRemove => setElements(els => removeElements(elementsToRemove, els));\n\n  const onLoad = _reactFlowInstance => setReactFlowInstance(_reactFlowInstance);\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: getId(),\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setElements(es => es.concat(newNode));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classNames(props.className, \"h-100\"),\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dndflow\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reactflow-wrapper\",\n            ref: reactFlowWrapper,\n            children: /*#__PURE__*/_jsxDEV(ReactF, {\n              elements: elements,\n              onConnect: onConnect,\n              onElementsRemove: onElementsRemove,\n              onLoad: onLoad,\n              onDrop: onDrop,\n              onDragOver: onDragOver,\n              nodeTypes: nodeTypes,\n              children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 16\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 14\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ReactFlow, \"t0Pmcgj3+nKbdYNPuwo8wbQmUCM=\");\n\n_c = ReactFlow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactFlow\");","map":{"version":3,"sources":["/Users/avathorn/repos/TextFSMWeb/text-fsm-web/src/components/ReactFlow/ReactFlow.jsx"],"names":["classNames","Card","CardBody","React","useState","useRef","ReactF","ReactFlowProvider","addEdge","removeElements","Controls","Sidebar","ColorSelectorNode","nodeTypes","selectorNode","onChange","event","setElements","els","map","e","isEdge","id","color","target","value","setBgColor","data","initialElements","type","label","position","x","y","style","border","padding","getId","ReactFlow","props","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","elements","onConnect","params","onElementsRemove","elementsToRemove","onLoad","_reactFlowInstance","onDragOver","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","newNode","es","concat","className"],"mappings":";;;AAAA;AACA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,YAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,MAAP,IACEC,iBADF,EAEEC,OAFF,EAGEC,cAHF,EAIEC,QAJF,QAKO,qBALP;AAOA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,iBAAP,MAA8B,aAA9B;AAEA,OAAO,2BAAP;AACA,OAAO,oBAAP;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,YAAY,EAAEF;AADE,CAAlB;;AAGA,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AAC1BC,EAAAA,WAAW,CAAEC,GAAD,IACVA,GAAG,CAACC,GAAJ,CAASC,CAAD,IAAO;AACb,QAAIC,MAAM,CAACD,CAAD,CAAN,IAAaA,CAAC,CAACE,EAAF,KAAS,GAA1B,EAA+B;AAC7B,aAAOF,CAAP;AACD;;AAED,UAAMG,KAAK,GAAGP,KAAK,CAACQ,MAAN,CAAaC,KAA3B;AAEAC,IAAAA,UAAU,CAACH,KAAD,CAAV;AAEA,WAAO,EACL,GAAGH,CADE;AAELO,MAAAA,IAAI,EAAE,EACJ,GAAGP,CAAC,CAACO,IADD;AAEJJ,QAAAA;AAFI;AAFD,KAAP;AAOD,GAhBD,CADS,CAAX;AAmBD,CApBD;;AAsBA,MAAMK,eAAe,GAAG,CACtB;AACEN,EAAAA,EAAE,EAAE,GADN;AAEEO,EAAAA,IAAI,EAAE,OAFR;AAGEF,EAAAA,IAAI,EAAE;AAAEG,IAAAA,KAAK,EAAE;AAAT,GAHR;AAIEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAJZ,CADsB,EAOtB;AACEX,EAAAA,EAAE,EAAE,GADN;AAEEO,EAAAA,IAAI,EAAE,cAFR;AAGEF,EAAAA,IAAI,EAAE;AAAEZ,IAAAA,QAAQ,EAAEA,QAAZ;AAAsBQ,IAAAA,KAAK,EAAE;AAA7B,GAHR;AAIEW,EAAAA,KAAK,EAAE;AAAEC,IAAAA,MAAM,EAAE,gBAAV;AAA4BC,IAAAA,OAAO,EAAE;AAArC,GAJT;AAKEL,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AALZ,CAPsB,CAAxB;AAgBA,IAAIX,EAAE,GAAG,CAAT;;AACA,MAAMe,KAAK,GAAG,MAAO,WAAUf,EAAE,EAAG,EAApC;;AAEA,OAAO,MAAMgB,SAAS,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAkB;AAAA;;AACzC,QAAMC,gBAAgB,GAAGnC,MAAM,CAAC,IAAD,CAA/B;AACA,QAAM,CAACoC,iBAAD,EAAoBC,oBAApB,IAA4CtC,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM,CAACuC,QAAD,EAAW1B,WAAX,IAA0Bb,QAAQ,CAACwB,eAAD,CAAxC;;AACA,QAAMgB,SAAS,GAAIC,MAAD,IAAY5B,WAAW,CAAEC,GAAD,IAASV,OAAO,CAACqC,MAAD,EAAS3B,GAAT,CAAjB,CAAzC;;AACA,QAAM4B,gBAAgB,GAAIC,gBAAD,IACvB9B,WAAW,CAAEC,GAAD,IAAST,cAAc,CAACsC,gBAAD,EAAmB7B,GAAnB,CAAxB,CADb;;AAGA,QAAM8B,MAAM,GAAIC,kBAAD,IACbP,oBAAoB,CAACO,kBAAD,CADtB;;AAGA,QAAMC,UAAU,GAAIlC,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACmC,cAAN;AACAnC,IAAAA,KAAK,CAACoC,YAAN,CAAmBC,UAAnB,GAAgC,MAAhC;AACD,GAHD;;AAKA,QAAMC,MAAM,GAAItC,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACmC,cAAN;AAEA,UAAMI,eAAe,GAAGf,gBAAgB,CAACgB,OAAjB,CAAyBC,qBAAzB,EAAxB;AACA,UAAM5B,IAAI,GAAGb,KAAK,CAACoC,YAAN,CAAmBM,OAAnB,CAA2B,uBAA3B,CAAb;AACA,UAAM3B,QAAQ,GAAGU,iBAAiB,CAACkB,OAAlB,CAA0B;AACzC3B,MAAAA,CAAC,EAAEhB,KAAK,CAAC4C,OAAN,GAAgBL,eAAe,CAACM,IADM;AAEzC5B,MAAAA,CAAC,EAAEjB,KAAK,CAAC8C,OAAN,GAAgBP,eAAe,CAACQ;AAFM,KAA1B,CAAjB;AAIA,UAAMC,OAAO,GAAG;AACd1C,MAAAA,EAAE,EAAEe,KAAK,EADK;AAEdR,MAAAA,IAFc;AAGdE,MAAAA,QAHc;AAIdJ,MAAAA,IAAI,EAAE;AAAEG,QAAAA,KAAK,EAAG,GAAED,IAAK;AAAjB;AAJQ,KAAhB;AAOAZ,IAAAA,WAAW,CAAEgD,EAAD,IAAQA,EAAE,CAACC,MAAH,CAAUF,OAAV,CAAT,CAAX;AACD,GAjBD;;AAmBD,sBACC,QAAC,IAAD;AAAM,IAAA,SAAS,EAAGhE,UAAU,CAACuC,KAAK,CAAC4B,SAAP,EAAkB,OAAlB,CAA5B;AAAA,2BACC,QAAC,QAAD;AAAA,6BAEI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACE,QAAC,iBAAD;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,mBAAf;AAAmC,YAAA,GAAG,EAAE3B,gBAAxC;AAAA,mCACE,QAAC,MAAD;AACE,cAAA,QAAQ,EAAEG,QADZ;AAEE,cAAA,SAAS,EAAEC,SAFb;AAGE,cAAA,gBAAgB,EAAEE,gBAHpB;AAIE,cAAA,MAAM,EAAEE,MAJV;AAKE,cAAA,MAAM,EAAEM,MALV;AAME,cAAA,UAAU,EAAEJ,UANd;AAOE,cAAA,SAAS,EAAErC,SAPb;AAAA,qCASE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAcE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAyBA,CA5DM;;GAAMyB,S;;KAAAA,S","sourcesContent":["// import ReactF from 'react-flow-renderer';\nimport classNames from \"classnames/dedupe\";\nimport { Card, CardBody } from \"reactstrap\";\nimport React, { useState, useRef } from 'react';\nimport ReactF, {\n  ReactFlowProvider,\n  addEdge,\n  removeElements,\n  Controls,\n} from 'react-flow-renderer';\n\nimport { Sidebar } from './Sidebar';\nimport ColorSelectorNode from './StartNode';\n\nimport 'assets/css/react-flow.css';\nimport 'assets/css/dnd.css';\n\nconst nodeTypes = {\n  selectorNode: ColorSelectorNode,\n};\nconst onChange = (event) => {\n  setElements((els) =>\n    els.map((e) => {\n      if (isEdge(e) || e.id !== '2') {\n        return e;\n      }\n\n      const color = event.target.value;\n\n      setBgColor(color);\n\n      return {\n        ...e,\n        data: {\n          ...e.data,\n          color,\n        },\n      };\n    })\n  );\n};\n\nconst initialElements = [\n  {\n    id: '1',\n    type: 'input',\n    data: { label: 'input node' },\n    position: { x: 250, y: 5 },\n  },\n  {\n    id: '2',\n    type: 'selectorNode',\n    data: { onChange: onChange, color: '#1A192B' },\n    style: { border: '1px solid #777', padding: 10 },\n    position: { x: 300, y: 50 },\n  },\n];\n\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\n\nexport const ReactFlow = ({ ...props }) => {\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState(initialElements);\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\n  const onElementsRemove = (elementsToRemove) =>\n    setElements((els) => removeElements(elementsToRemove, els));\n\n  const onLoad = (_reactFlowInstance) =>\n    setReactFlowInstance(_reactFlowInstance);\n\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  const onDrop = (event) => {\n    event.preventDefault();\n\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n    const newNode = {\n      id: getId(),\n      type,\n      position,\n      data: { label: `${type} node` },\n    };\n\n    setElements((es) => es.concat(newNode));\n  };\n\n\treturn (\n\t\t<Card className={ classNames(props.className, \"h-100\") }>\n\t\t\t<CardBody>\n\n\t\t\t    <div className=\"dndflow\">\n\t\t\t      <ReactFlowProvider>\n\t\t\t        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n\t\t\t          <ReactF\n\t\t\t            elements={elements}\n\t\t\t            onConnect={onConnect}\n\t\t\t            onElementsRemove={onElementsRemove}\n\t\t\t            onLoad={onLoad}\n\t\t\t            onDrop={onDrop}\n\t\t\t            onDragOver={onDragOver}\n\t\t\t            nodeTypes={nodeTypes}\n\t\t\t          >\n\t\t\t            <Controls />\n\t\t\t          </ReactF>\n\t\t\t        </div>\n\t\t\t        <Sidebar />\n\t\t\t      </ReactFlowProvider>\n\t\t\t    </div>\n\t\t\t</CardBody>\n\t\t</Card>\n\t)\n}"]},"metadata":{},"sourceType":"module"}